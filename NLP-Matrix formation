package Graphs;
import java.util.*;
import java.io.*;
import edu.stanford.nlp.tagger.maxent.MaxentTagger;

public class graphform extends disjointsets{
	public static void main (String[] args) throws java.lang.Exception
	{
		HashMap<String, Integer> hm = new HashMap<String, Integer>();
		HashMap<Integer, String> hm1 = new HashMap<Integer, String>();
		HashMap<String, Integer> hm2 = new HashMap<String, Integer>();
		ArrayList<String> finalwords = new ArrayList<String>();
		ArrayList<String> finalwords1 = new ArrayList<String>();
		int i=0;
		MaxentTagger tagger = new MaxentTagger("taggers/english-left3words-distsim.tagger");
		
		//reading stop words
		ArrayList<String> stopwords = new ArrayList<String>();
		String scurrline;
		FileReader sw = new FileReader("D:\\User Libraries\\Documents\\NLP\\stopwords.txt");
		BufferedReader br = new BufferedReader(sw);
		while((scurrline=br.readLine())!=null)
			stopwords.add(scurrline);
		//System.out.println(stopwords);
		br.close();
		
		//reading the input file
		String tmp;
		ArrayList<String> words = new ArrayList<String>();
		ArrayList<String> words1 = new ArrayList<String>();
		FileReader inpw = new FileReader("D:\\User Libraries\\Documents\\NLP\\input.txt");
		BufferedReader br1 = new BufferedReader(inpw);
		while((tmp=br1.readLine())!=null)
		{
			//System.out.println(tmp);			
			StringBuilder sb = new StringBuilder(tmp);
			String[] tmpw = sb.toString().split("\\s");
			String tagged = tagger.tagString(tmp);
			//System.out.println(tagged);
			//System.out.println();
			StringBuilder sb1 = new StringBuilder(tagged);
			String[] tmpw1 = sb1.toString().split("\\s");
			for(String word : tmpw)
			{
				StringBuilder ss = new StringBuilder();
				for(int k=0;k<word.length();k++)
				{
					char c = word.charAt(k);
					if(((c>='a')&&(c<='z'))||((c>='A')&&(c<='Z')))
						ss.append(c);
				}
				word=ss.toString();
				if(word.length()>0)
				{
					words.add(word);
					//System.out.println(word);
				}
			}
			for(String word : tmpw1)
			{
				if(word.length()>0)
				{
					char c = word.charAt(0);
					if(((c>='a')&&(c<='z'))||((c>='A')&&(c<='Z')))
					{
						words1.add(word);
						//System.out.println(word);
					}
				}				
			}
		}
		//System.out.println(words);
		br1.close();
		
		//removing Stop Words
		for(int k=0;k<words.size();k++)
		{
			String wordCompare = words.get(k).toLowerCase();
			if(!stopwords.contains(wordCompare))
			{
				finalwords.add(wordCompare);
				finalwords1.add(words1.get(k));
				if(!hm.containsKey(words1.get(k)))
				{
					//System.out.print("'"+words.get(k)+"'"+","+" ");
					hm.put(words1.get(k),i);
					hm1.put(i, words.get(k));
					hm2.put(words.get(k),i);
					i++;
				}
			}
		}
		//System.out.println(finalwords);
		
		//generating matrix
		int now=i;
		ArrayList<ArrayList<Integer>> gmatrix = new ArrayList<ArrayList<Integer>>();
		for(int a=0;a<now;a++)
		{
			ArrayList<Integer> temp1 = new ArrayList<Integer>();
			for(int b=0;b<now;b++)
			{
				temp1.add(0);
			}
			gmatrix.add(temp1);
		}
		for(int x=0;x<finalwords.size();x++)
		{
			for(int y=x-5;y<=x+5;y++)
			{
				if(y>=0&&y<finalwords.size()&&y!=x)
				{
					String a1 = finalwords1.get(x);
					String a2 = finalwords1.get(y);
					int x1;
					for(x1=0;x1<a1.length();x1++)
						if(a1.charAt(x1)=='_')
							break;
					int x2;
					for(x2=0;x2<a2.length();x2++)
						if(a2.charAt(x2)=='_')
							break;
					a1 = a1.substring(x1+1);
					a2 = a2.substring(x2+1);
					int row = hm.get(finalwords1.get(x));
					int col = hm.get(finalwords1.get(y));
					if(a1.equals(a2))
						gmatrix.get(row).set(col,1);
				}
			}
		}
		/*System.out.println();
		System.out.println(now);		
		for(int m=0;m<now;m++)
		{
			for(int n=0;n<now-1;n++)
				System.out.print(gmatrix.get(m).get(n)+" ");
			System.out.println(gmatrix.get(m).get(now-1)+";");
		}*/
		
		//getting the geodesic matrix
		ArrayList<ArrayList<Integer>> geomatrix = flwa(gmatrix);
		//System.out.println(geomatrix);
		
		//forming clusters
		List<Map<String, Set<String>>> dset = clusterize(geomatrix, hm1,now);
		
		//creating dot file
		dotCreate(dset, hm2, gmatrix, hm1);	
	}
	
	public static ArrayList<ArrayList<Integer>> flwa (ArrayList<ArrayList<Integer>> graph)
	{
		int N=graph.get(0).size();
		ArrayList<ArrayList<Integer>> dist = new ArrayList<ArrayList<Integer>>();
		for(int i=0;i<N;i++)
		{
			ArrayList<Integer> temp = new ArrayList<Integer>();
			for(int j=0;j<N;j++)
				temp.add(0);
			dist.add(temp);
		}
		int i,j,k;
		
		for(i=0;i<N;i++)
			for(j=0;j<N;j++)
			{
				if(i!=j&&graph.get(i).get(j)==0)
					dist.get(i).set(j, 9999);
				else
					dist.get(i).set(j, graph.get(i).get(j));
			}
		
		for(k=0;k<N;k++)
			for(i=0;i<N;i++)
				for(j=0;j<N;j++)
				{
					if(dist.get(i).get(k)+dist.get(k).get(j)<dist.get(i).get(j))
						dist.get(i).set(j, dist.get(i).get(k)+dist.get(k).get(j));
				}
		
		/*for(i=0;i<N;i++)
			for(j=0;j<N;j++)
				if(dist.get(i).get(j)==9999)
					dist.get(i).set(j, 0);*/
		
		return dist;
	}
	
	
	public static List<Map<String, Set<String>>> clusterize (ArrayList<ArrayList<Integer>> geomatrix, HashMap<Integer, String> words, int now)
	{
		// create disjoint sets for all elements
		DisjointSets();
		for(int i=0;i<words.size();i++)
			SetCreate(words.get(i));
		while(disjointSet.size()>80)
		{
			//System.out.println(x);
			int N = geomatrix.get(0).size();
			int imin = -1;
			int jmin = -1;
			int min = 9999;
			for(int i=0;i<N;i++)
			{
				for(int j=0;j<N;j++)
				{
					if(geomatrix.get(i).get(j)!=0&&geomatrix.get(i).get(j)<min)
					{
						imin=i;
						jmin=j;
						min=geomatrix.get(i).get(j);
					}
				}
			}
			String first = words.get(imin);
			String second = words.get(jmin);
			geomatrix.get(imin).set(jmin,9999);
			
			if(!(SetFind(first).equals(SetFind(second))))
				union(first,second);
		}
		
		/*for(int i=0;i<disjointSet.size();i++)
		{
			Map<String, Set<String>> map = disjointSet.get(i);
			Set<String> keySet = map.keySet();
			
			for(String key : keySet)
			{
				System.out.println(key);
				Set<String> set = map.get(key);
				for(String element: set)
					System.out.print(element+" ");
				System.out.println();
			}
			System.out.println(i);
		}*/
		return disjointSet;
	}

	public static void dotCreate(List<Map<String, Set<String>>> disjointSet, HashMap<String, Integer> hm, ArrayList<ArrayList<Integer>> gmatrix, HashMap<Integer, String> hm1) throws IOException
	{
		int N = gmatrix.get(0).size();
		File file = new File("test.dot");
		file.createNewFile();
		FileWriter writer = new FileWriter(file);
		writer.write("Graph {\n");
		writer.write("subgraph[style=invis];\n");
	    writer.write("\n");
	    int z=0;
	    for(int i=0;i<disjointSet.size();i++)
	    {	    	
	    	Map<String, Set<String>> map = disjointSet.get(i);
			Set<String> keySet = map.keySet();			
			for(String key : keySet)
			{
				Set<String> set = map.get(key);
				if(set.size()>1)
				{
					writer.write("subgraph cluster_"+z+"{\n");
					z++;
					/*if(z%2==0)
						writer.write("node [style=filled];\n");*/
					ArrayList<String> newset = new ArrayList<String>();
					Iterator<String> it = set.iterator();
					while(it.hasNext())
					{
						newset.add(it.next());
					}
					//System.out.println(newset.size()==set.size());
					for(int a=0;a<newset.size()-1;a++)
					{
						for(int b=a+1;b<newset.size();b++)
						{
							int x = hm.get(newset.get(a));
							int y = hm.get(newset.get(b));
							gmatrix.get(x).set(y, 0);
							writer.write("  "+newset.get(a)+" -- "+newset.get(b)+";\n");
						}
					}
					writer.write("}\n");
				}
			}			
	    }
	    for(int i=0;i<N;i++)
		{
			for(int j=0;j<N;j++)
			{
				if(gmatrix.get(i).get(j)==1)
					writer.write("  "+hm1.get(i)+" -- "+hm1.get(j)+";\n");
			}
		}
	    writer.write("}\n");
	    writer.flush();
	    writer.close();
	}
}
