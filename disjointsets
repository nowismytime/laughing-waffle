package Graphs;

import java.util.*;
public class disjointsets {
	protected static List<Map<String, Set<String>>> disjointSet;
	
	public static void DisjointSets()
	{
		disjointSet = new ArrayList<Map<String, Set<String>>>();
	}
	
	public static void SetCreate(String element)
	{
		Map<String, Set<String>> map = new HashMap<String, Set<String>>();
		Set<String> set = new HashSet<String>();
		set.add(element);
		map.put(element,set);
		disjointSet.add(map);
	}
	
	public static void union (String first, String second)
	{
		String first_rep = SetFind(first);
		String second_rep = SetFind(second);
		
		Set<String> first_set = null;
		Set<String> second_set = null;
		
		for(int i=0;i<disjointSet.size();i++)
		{
			Map<String, Set<String>> map = disjointSet.get(i);
			if(map.containsKey(first_rep))
				first_set= map.get(first_rep);
			else if (map.containsKey(second_rep))
				second_set = map.get(second_rep);
		}
		
		if(first_set!=null&&second_set!=null)
			first_set.addAll(second_set);
		
		for(int i=0;i<disjointSet.size();i++)
		{
			Map<String, Set<String>> map = disjointSet.get(i);
			if(map.containsKey(first_rep))
				map.put(first_rep, first_set);
			else if (map.containsKey(second_rep))
			{
				map.remove(second_rep);
				disjointSet.remove(i);
			}				
		}
		return;	
	}
	
	public static String SetFind(String element)
	{
		for(int i=0;i<disjointSet.size();i++)
		{
			Map<String, Set<String>> map = disjointSet.get(i);
			Set<String> keySet = map.keySet();
			
			for(String key : keySet)
			{
				Set<String> set = map.get(key);
				if(set.contains(element))
					return key;
			}
		}
		return null;
	}
	
	public int getNumberofDisjointSets()
    {
        return disjointSet.size();
    }
}
